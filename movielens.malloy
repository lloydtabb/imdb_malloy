source: link is table('movielens.link') + {
  primary_key: movieId
  declare:
    tconst is concat('tt',LPAD(imdbId, 7, '0'))
}

source: ml_movie is table('movielens.movie') + {
  primary_key: movieId

  join_many: scores is table('movielens.genome_scores') on movieId = scores.movieId
  join_one: genome_tag is table('movielens.genome_tags') on scores.tagId= genome_tag.tagId

  declare:
    movie_count is count()
    score_count is count(distinct concat(scores.movieId::string,'|',scores.tagId::string))

    tag is genome_tag.tag
    relevance is scores.relevance::number
    average_relevence is scores.avg(relevance)
    is_relevant is relevance > 0.4
    relevant_movie_count is count() {where: is_relevant}

  query: by_movie is {
    group_by: title
    aggregate: score_count
  }
  
  query: movie_tags is {
    group_by: title
    aggregate: average_relevence
    nest: genome_tags_list_detail is {
      order_by: 2 desc
      where: is_relevant
      group_by: genome_tag.tag, relevance
      limit: 20
    }
  }

  query: by_tag is {
    limit: 100
    where: 
      is_relevant
      -- and  tag ~ r'hist'
    group_by: tag
    aggregate: relevant_movie_count, average_relevence
    nest: distribution_bar_chart is {
      group_by: relevance is FLOOR(relevance * 10)
      aggregate: movie_count
    }
    nest: by_title is {
      group_by: title
      aggregate: r is avg(relevance)
      limit: 5
    }
  }
  query: imdb_tags is {
    join_one: link with movieId
    group_by: link.tconst
    nest: tags is {
      where: is_relevant
      order_by: relevance desc
      group_by: tag, relevance
    }
  }
}
